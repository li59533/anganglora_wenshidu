<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MKL16_withOSAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MKL16_withOSAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 31 19:41:09 2020
<BR><P>
<H3>Maximum Stack Usage =       1376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART2_IRQHandler &rArr; APP_Conf_RevByteOneByte &rArr; bsp_conf_rev &rArr; APP_RevMessage_Process &rArr; APP_Conf_SetADCToRealValue &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC0_IRQHandler</a> from bsp_adc.o(i.ADC0_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1b]">CMP0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[24]">DAC0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2d]">DMA0_DriverIRQHandler</a> from fsl_dma.o(i.DMA0_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[b]">DMA0_IRQHandler</a> from bsp_uart.o(i.DMA0_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2e]">DMA1_DriverIRQHandler</a> from fsl_dma.o(i.DMA1_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[c]">DMA1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2f]">DMA2_DriverIRQHandler</a> from fsl_dma.o(i.DMA2_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[d]">DMA2_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[30]">DMA3_DriverIRQHandler</a> from fsl_dma.o(i.DMA3_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[e]">DMA3_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[3a]">DbgConsole_Putchar</a> from fsl_debug_console.o(i.DbgConsole_Putchar) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[39]">DefaultISR</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[10]">FTFA_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[3d]">HalTask_Process</a> from hal_task.o(i.HalTask_Process) referenced from osal_task.o(.constdata)
 <LI><a href="#[7]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[31]">I2C0_DriverIRQHandler</a> from fsl_i2c.o(i.I2C0_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[13]">I2C0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[32]">I2C1_DriverIRQHandler</a> from fsl_i2c.o(i.I2C1_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[14]">I2C1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[3b]">I2C_MasterTransferHandleIRQ</a> from fsl_i2c.o(i.I2C_MasterTransferHandleIRQ) referenced from fsl_i2c.o(i.I2C_MasterTransferCreateHandle)
 <LI><a href="#[38]">I2S0_DriverIRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[22]">I2S0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[12]">LLWU_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[27]">LPTMR0_IRQHandler</a> from bsp_tim.o(i.LPTMR0_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[11]">LVD_LVW_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[26]">MCG_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[21]">PIT_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[29]">PORTA_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2a]">PORTC_PORTD_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from bsp_rtc.o(i.RTC_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[20]">RTC_Seconds_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[f]">Reserved20_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[23]">Reserved40_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[28]">Reserved45_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[33]">SPI0_DriverIRQHandler</a> from fsl_spi.o(i.SPI0_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[34]">SPI1_DriverIRQHandler</a> from fsl_spi.o(i.SPI1_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from bsp_systick.o(i.SysTick_Handler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_mkl16z4.o(i.SystemInit) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[1c]">TPM0_IRQHandler</a> from bsp_tim.o(i.TPM0_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1d]">TPM1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[1e]">TPM2_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[25]">TSI0_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[35]">UART0_DriverIRQHandler</a> from fsl_lpsci.o(i.UART0_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[17]">UART0_IRQHandler</a> from bsp_uart.o(i.UART0_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[36]">UART1_DriverIRQHandler</a> from fsl_uart.o(i.UART1_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[18]">UART1_IRQHandler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[37]">UART2_DriverIRQHandler</a> from fsl_uart.o(i.UART2_DriverIRQHandler) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[19]">UART2_IRQHandler</a> from bsp_uart.o(i.UART2_IRQHandler) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[3e]">UserTask_Process</a> from user_task.o(i.UserTask_Process) referenced from osal_task.o(.constdata)
 <LI><a href="#[3f]">__main</a> from __main.o(!!!main) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[3c]">i2c_master_callback</a> from bsp_iic.o(i.i2c_master_callback) referenced from bsp_iic.o(i.bsp_iic1_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[42]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[44]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[14e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[150]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[151]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[152]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[153]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[154]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[155]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[156]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[157]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[158]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[160]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[161]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[162]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[164]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[16a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[16b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[45]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Board_Init_BSP &rArr; SystemParam_Init &rArr; SystemParam_Reset &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[48]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_ConvertDatetimeToSeconds
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2S0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2S0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORTC_PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved40_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[f1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_conf_rev
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_WriteBytes
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_SNcode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Reset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_makeUIDtoSNcode
</UL>

<P><STRONG><a name="[170]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[4e]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_conf_rev
</UL>

<P><STRONG><a name="[171]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_WriteBytes
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_SelfStart
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Sample_Rate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ReplyConf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GetVersion
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadAccelWhoAmI
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Battery_Reduce
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
</UL>

<P><STRONG><a name="[173]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Battery_Reduce
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_EQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_AlarmTime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
</UL>

<P><STRONG><a name="[174]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSetBaudRate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Battery_Reduce
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Update
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_ConvertSecondsToDatetime
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_RevByteOneByte
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transfer_enqueue_cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_AddCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_Update
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
</UL>

<P><STRONG><a name="[53]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[52]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[177]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
</UL>

<P><STRONG><a name="[178]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[58]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[59]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[47]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5a]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[4b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[179]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_adc.o(i.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ADC0_IRQHandler &rArr; ADC16_GetChannelConversionValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_addvalue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC16_GetChannelConversionValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>APP_Battery_Reduce</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, app_battery.o(i.APP_Battery_Reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = APP_Battery_Reduce &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_EQ
</UL>

<P><STRONG><a name="[66]"></a>APP_Conf_ClearConfStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_conf.o(i.APP_Conf_ClearConfStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_Conf_ClearConfStatus &rArr; BSP_LED_Blink &rArr; OS_Timer_Stop &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Blink
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[68]"></a>APP_Conf_GetVersion</STRONG> (Thumb, 92 bytes, Stack size 128 bytes, app_conf.o(i.APP_Conf_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = APP_Conf_GetVersion &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Get_Bin
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[6e]"></a>APP_Conf_GotoLowPower</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_GotoLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = APP_Conf_GotoLowPower &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[6f]"></a>APP_Conf_ID</STRONG> (Thumb, 82 bytes, Stack size 120 bytes, app_conf.o(i.APP_Conf_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = APP_Conf_ID &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[70]"></a>APP_Conf_ReplyConf</STRONG> (Thumb, 252 bytes, Stack size 136 bytes, app_conf.o(i.APP_Conf_ReplyConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = APP_Conf_ReplyConf &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[71]"></a>APP_Conf_Reply_Alarm</STRONG> (Thumb, 164 bytes, Stack size 128 bytes, app_conf.o(i.APP_Conf_Reply_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = APP_Conf_Reply_Alarm &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_ConvertSecondsToDatetime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[73]"></a>APP_Conf_Reply_Sample_Rate</STRONG> (Thumb, 118 bytes, Stack size 136 bytes, app_conf.o(i.APP_Conf_Reply_Sample_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = APP_Conf_Reply_Sample_Rate &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[74]"></a>APP_Conf_Reply_SelfStart</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, app_conf.o(i.APP_Conf_Reply_SelfStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = APP_Conf_Reply_SelfStart &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[75]"></a>APP_Conf_RevByteOneByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_conf.o(i.APP_Conf_RevByteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = APP_Conf_RevByteOneByte &rArr; bsp_conf_rev &rArr; APP_RevMessage_Process &rArr; APP_Conf_SetADCToRealValue &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_conf_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>APP_Conf_SendData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_WriteBytes_DMA
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_SelfStart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_Sample_Rate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_SNcode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_EQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_SelfStart
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Sample_Rate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ReplyConf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GotoLowPower
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GetVersion
</UL>

<P><STRONG><a name="[78]"></a>APP_Conf_SetADCToRealValue</STRONG> (Thumb, 184 bytes, Stack size 160 bytes, app_conf.o(i.APP_Conf_SetADCToRealValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = APP_Conf_SetADCToRealValue &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[7c]"></a>APP_Conf_SetConf</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_SetConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = APP_Conf_SetConf &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_AddCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Timer_Stop_Event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Clear_Event
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[80]"></a>APP_Conf_SetConfStatus</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_conf.o(i.APP_Conf_SetConfStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = APP_Conf_SetConfStatus &rArr; AppTask_Timer_Start_Event &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Blink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Timer_Start_Event
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Transfer_cmdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[83]"></a>APP_Conf_Set_ADCCalibration</STRONG> (Thumb, 294 bytes, Stack size 152 bytes, app_conf.o(i.APP_Conf_Set_ADCCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = APP_Conf_Set_ADCCalibration &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_GetChecksum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_AddPayload
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetData_Get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[88]"></a>APP_Conf_Set_AlarmTime</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_conf.o(i.APP_Conf_Set_AlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = APP_Conf_Set_AlarmTime &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_ConvertDatetimeToSeconds
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[8a]"></a>APP_Conf_Set_EQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_Set_EQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = APP_Conf_Set_EQ &rArr; APP_Battery_Reduce &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Battery_Reduce
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[8b]"></a>APP_Conf_Set_SNcode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, app_conf.o(i.APP_Conf_Set_SNcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = APP_Conf_Set_SNcode &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[8c]"></a>APP_Conf_Set_Sample_Rate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_Set_Sample_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = APP_Conf_Set_Sample_Rate &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[8d]"></a>APP_Conf_Set_SelfStart</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_Set_SelfStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = APP_Conf_Set_SelfStart &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[8e]"></a>APP_Conf_Start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = APP_Conf_Start &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Transfer_TrigSendValue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[90]"></a>APP_Conf_Stop</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_conf.o(i.APP_Conf_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = APP_Conf_Stop &rArr; APP_Conf_SendData &rArr; BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[84]"></a>APP_GetData_Get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_getdata.o(i.APP_GetData_Get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
</UL>

<P><STRONG><a name="[91]"></a>APP_RevMessage_Process</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, app_revmessage.o(i.APP_RevMessage_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = APP_RevMessage_Process &rArr; APP_Conf_SetADCToRealValue &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_revACK
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_SelfStart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_Sample_Rate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_SNcode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_EQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_AlarmTime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConfStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_SelfStart
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Sample_Rate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ReplyConf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GotoLowPower
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GetVersion
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ClearConfStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_conf_rev
</UL>

<P><STRONG><a name="[8f]"></a>APP_Transfer_TrigSendValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_transfer.o(i.APP_Transfer_TrigSendValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_Transfer_TrigSendValue &rArr; AppTask_Send_Event &rArr; OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Send_Event
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_transfer_enqueue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Start
</UL>

<P><STRONG><a name="[81]"></a>APP_Transfer_cmdClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_transfer.o(i.APP_Transfer_cmdClear))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConfStatus
</UL>

<P><STRONG><a name="[7e]"></a>AppTask_Clear_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(i.AppTask_Clear_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppTask_Clear_Event &rArr; OS_Events_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConf
</UL>

<P><STRONG><a name="[95]"></a>AppTask_Send_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(i.AppTask_Send_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppTask_Send_Event &rArr; OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Transfer_TrigSendValue
</UL>

<P><STRONG><a name="[82]"></a>AppTask_Timer_Start_Event</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_task.o(i.AppTask_Timer_Start_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AppTask_Timer_Start_Event &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConfStatus
</UL>

<P><STRONG><a name="[7d]"></a>AppTask_Timer_Stop_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(i.AppTask_Timer_Stop_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AppTask_Timer_Stop_Event &rArr; OS_Timer_Stop &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConf
</UL>

<P><STRONG><a name="[7f]"></a>BSP_E32_AddCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_e32.o(i.BSP_E32_AddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_E32_AddCmd &rArr; NetTask_Timer_Start_Event &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask_Timer_Start_Event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask_Send_Event
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConf
</UL>

<P><STRONG><a name="[9d]"></a>BSP_E32_RevByteOneByte</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_e32.o(i.BSP_E32_RevByteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_E32_RevByteOneByte &rArr; NetTask_Timer_Start_Event &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask_Timer_Start_Event
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>BSP_Flash_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_flash.o(i.BSP_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = BSP_Flash_Init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetProperty
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_BSP
</UL>

<P><STRONG><a name="[a2]"></a>BSP_Flash_ReadBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_flash.o(i.BSP_Flash_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Flash_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_WriteBytes
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Init
</UL>

<P><STRONG><a name="[a1]"></a>BSP_Flash_WriteBytes</STRONG> (Thumb, 88 bytes, Stack size 1040 bytes, bsp_flash.o(i.BSP_Flash_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_ReadBytes
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
</UL>

<P><STRONG><a name="[112]"></a>BSP_GetTimrCurCount</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_tim.o(i.BSP_GetTimrCurCount))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR0_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>BSP_IIC_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_iic.o(i.BSP_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BSP_IIC_Init &rArr; bsp_iic1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Init
</UL>

<P><STRONG><a name="[67]"></a>BSP_LED_Blink</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, bsp_led.o(i.BSP_LED_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Blink &rArr; OS_Timer_Stop &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConfStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ClearConfStatus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Init
</UL>

<P><STRONG><a name="[a8]"></a>BSP_LED_Close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LED_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[aa]"></a>BSP_LED_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BSP_LED_Init &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTask_Init
</UL>

<P><STRONG><a name="[ac]"></a>BSP_LED_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LED_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[ad]"></a>BSP_LED_Toggle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_led.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LED_Toggle &rArr; BSP_LED_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Open
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>BSP_LED_Update</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, bsp_led.o(i.BSP_LED_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LED_Update &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_GetSystemClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTask_Process
</UL>

<P><STRONG><a name="[af]"></a>BSP_Power_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_power.o(i.BSP_Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BSP_Power_Init &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_BSP
</UL>

<P><STRONG><a name="[b1]"></a>BSP_Power_V30_ON</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_power.o(i.BSP_Power_V30_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Power_V30_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePinOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Init
</UL>

<P><STRONG><a name="[89]"></a>BSP_RTC_ConvertDatetimeToSeconds</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, bsp_rtc.o(i.BSP_RTC_ConvertDatetimeToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BSP_RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_AlarmTime
</UL>

<P><STRONG><a name="[72]"></a>BSP_RTC_ConvertSecondsToDatetime</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, bsp_rtc.o(i.BSP_RTC_ConvertSecondsToDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BSP_RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
</UL>

<P><STRONG><a name="[b2]"></a>BSP_RTC_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, bsp_rtc.o(i.BSP_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BSP_RTC_Init &rArr; RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDefaultConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StartTimer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableInterrupts
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_BSP
</UL>

<P><STRONG><a name="[ba]"></a>BSP_RTC_SetDate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_rtc.o(i.BSP_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BSP_RTC_SetDate &rArr; RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StopTimer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_revACK
</UL>

<P><STRONG><a name="[133]"></a>BSP_SYSTICK_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_systick.o(i.BSP_SYSTICK_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bc]"></a>BSP_ShowClock</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, bsp_clock.o(i.BSP_ShowClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = BSP_ShowClock &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_ClockRUN
</UL>

<P><STRONG><a name="[be]"></a>BSP_ShowDate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bsp_rtc.o(i.BSP_ShowDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = BSP_ShowDate &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Process
</UL>

<P><STRONG><a name="[c0]"></a>BSP_SysTick_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_systick.o(i.BSP_SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BSP_SysTick_Init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>BSP_SystemClockInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_clock.o(i.BSP_SystemClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BSP_SystemClockInit &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetInternalRefClkConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimSafeDivs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_CONFIG_SetFllExtRefDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_ClockRUN
</UL>

<P><STRONG><a name="[77]"></a>BSP_UART_WriteBytes_DMA</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp_uart.o(i.BSP_UART_WriteBytes_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BSP_UART_WriteBytes_DMA &rArr; LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferSendDMA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferSendDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SendData
</UL>

<P><STRONG><a name="[cb]"></a>Board_Init_BSP</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(i.Board_Init_BSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = Board_Init_BSP &rArr; SystemParam_Init &rArr; SystemParam_Reset &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Power_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>Board_Init_ClockRUN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.Board_Init_ClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Board_Init_ClockRUN &rArr; BSP_ShowClock &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ShowClock
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
</UL>

<P><STRONG><a name="[d0]"></a>CLOCK_EnablePll0</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnablePll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
</UL>

<P><STRONG><a name="[d1]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CLOCK_GetEr32kClkFreq &rArr; CLOCK_GetOsc0ErClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[d3]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[d8]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_GetFreq</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ShowClock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadAccelWhoAmI
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>

<P><STRONG><a name="[da]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetInternalRefClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[d2]"></a>CLOCK_GetOsc0ErClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOsc0ErClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CLOCK_GetOsc0ErClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[d5]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[db]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CLOCK_GetPll0Freq &rArr; CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[d9]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscRangeFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_SetInternalRefClkConfig</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fsl_clock.o(i.CLOCK_SetInternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SetInternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
</UL>

<P><STRONG><a name="[cf]"></a>CLOCK_SetPbeMode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CLOCK_SetPbeMode &rArr; CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_SetSimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetSimConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
</UL>

<P><STRONG><a name="[134]"></a>CRC16_Modbus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, crc.o(i.CRC16_Modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_makeUIDtoSNcode
</UL>

<P><STRONG><a name="[2d]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_dma.o(i.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA0_DriverIRQHandler &rArr; DMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, bsp_uart.o(i.DMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = DMA0_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferAbortSendDMA
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendDMA
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelStatusFlags
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_dma.o(i.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA1_DriverIRQHandler &rArr; DMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_dma.o(i.DMA2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA2_DriverIRQHandler &rArr; DMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_dma.o(i.DMA3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA3_DriverIRQHandler &rArr; DMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>DMA_AbortTransfer</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_dma.o(i.DMA_AbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DMA_AbortTransfer &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferAbortSendDMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendDMA
</UL>

<P><STRONG><a name="[df]"></a>DMA_HandleIRQ</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fsl_dma.o(i.DMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DriverIRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DriverIRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>DMA_PrepareTransfer</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, fsl_dma.o(i.DMA_PrepareTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DMA_PrepareTransfer &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferSendDMA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferSendDMA
</UL>

<P><STRONG><a name="[e8]"></a>DMA_ResetChannel</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_dma.o(i.DMA_ResetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DMA_ResetChannel &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitTransfer
</UL>

<P><STRONG><a name="[e9]"></a>DMA_SetTransferConfig</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fsl_dma.o(i.DMA_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitTransfer
</UL>

<P><STRONG><a name="[ec]"></a>DMA_SubmitTransfer</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, fsl_dma.o(i.DMA_SubmitTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ResetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferSendDMA
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferSendDMA
</UL>

<P><STRONG><a name="[ee]"></a>DbgConsole_Printf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[3a]"></a>DbgConsole_Putchar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_debug_console.o(i.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[a3]"></a>FLASH_Erase</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, fsl_flash.o(i.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_user_key
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_WriteBytes
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_GetProperty</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_GetProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_GetProperty &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Init
</UL>

<P><STRONG><a name="[9f]"></a>FLASH_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fsl_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLASH_Init &rArr; FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Init
</UL>

<P><STRONG><a name="[f9]"></a>FLASH_PrepareExecuteInRamFunctions</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_flash.o(i.FLASH_PrepareExecuteInRamFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLASH_PrepareExecuteInRamFunctions &rArr; copy_flash_common_bit_operation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_run_command
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_flash_common_bit_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[a4]"></a>FLASH_Program</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, fsl_flash.o(i.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FLASH_Program &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_matched_operation_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_WriteBytes
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_PinInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Power_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[fc]"></a>HalTask_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_task.o(i.HalTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HalTask_Init &rArr; BSP_LED_Init &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Task_Init
</UL>

<P><STRONG><a name="[3d]"></a>HalTask_Process</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_task.o(i.HalTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HalTask_Process &rArr; BSP_LED_Update &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = HardFault_Handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C0_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_DriverIRQHandler &rArr; I2C_TransferCommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferCommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>I2C_DisableInterrupts</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[10e]"></a>I2C_EnableInterrupts</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[fe]"></a>I2C_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = I2C_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[103]"></a>I2C_MasterGetDefaultConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2C_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadAccelWhoAmI
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>

<P><STRONG><a name="[107]"></a>I2C_MasterGetStatusFlags</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterGetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
</UL>

<P><STRONG><a name="[104]"></a>I2C_MasterInit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = I2C_MasterInit &rArr; I2C_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSetBaudRate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetInstance
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterClearStatusFlags
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadAccelWhoAmI
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>

<P><STRONG><a name="[101]"></a>I2C_MasterRepeatedStart</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, fsl_i2c.o(i.I2C_MasterRepeatedStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterRepeatedStart
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>

<P><STRONG><a name="[106]"></a>I2C_MasterSetBaudRate</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, fsl_i2c.o(i.I2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[102]"></a>I2C_MasterStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_MasterStart
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>

<P><STRONG><a name="[10b]"></a>I2C_MasterStop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_i2c.o(i.I2C_MasterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterStop
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
</UL>

<P><STRONG><a name="[108]"></a>I2C_MasterTransferCreateHandle</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, fsl_i2c.o(i.I2C_MasterTransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = I2C_MasterTransferCreateHandle &rArr; I2C_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetInstance
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>

<P><STRONG><a name="[3b]"></a>I2C_MasterTransferHandleIRQ</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fsl_i2c.o(i.I2C_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C_MasterTransferHandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DisableInterrupts
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_i2c.o(i.I2C_MasterTransferCreateHandle)
</UL>
<P><STRONG><a name="[10d]"></a>I2C_MasterTransferNonBlocking</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_MasterTransferNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C_MasterTransferNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadAccelWhoAmI
</UL>

<P><STRONG><a name="[110]"></a>I2C_ReadAccelWhoAmI</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, bsp_iic.o(i.I2C_ReadAccelWhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = I2C_ReadAccelWhoAmI &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Process
</UL>

<P><STRONG><a name="[6b]"></a>LNprotocol_AddPayload</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lnprotocol.o(i.LNprotocol_AddPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LNprotocol_AddPayload &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_SelfStart
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Sample_Rate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ReplyConf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GetVersion
</UL>

<P><STRONG><a name="[13f]"></a>LNprotocol_Checksum</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lnprotocol.o(i.LNprotocol_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LNprotocol_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_conf_rev
</UL>

<P><STRONG><a name="[6c]"></a>LNprotocol_GetChecksum</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lnprotocol.o(i.LNprotocol_GetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LNprotocol_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_SelfStart
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Sample_Rate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Reply_Alarm
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ReplyConf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_ID
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GetVersion
</UL>

<P><STRONG><a name="[138]"></a>LPSCI_ClearStatusFlags</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, fsl_lpsci.o(i.LPSCI_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPSCI_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>LPSCI_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_lpsci.o(i.LPSCI_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>LPSCI_TransferAbortSendDMA</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_lpsci_dma.o(i.LPSCI_TransferAbortSendDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPSCI_TransferAbortSendDMA &rArr; DMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_EnableTxDMA
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>LPSCI_TransferSendDMA</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, fsl_lpsci_dma.o(i.LPSCI_TransferSendDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LPSCI_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitTransfer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareTransfer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_EnableTxDMA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_WriteBytes_DMA
</UL>

<P><STRONG><a name="[27]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_tim.o(i.LPTMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LPTMR0_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTimrCurCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>NetTask_Send_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_task.o(i.NetTask_Send_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NetTask_Send_Event &rArr; OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_AddCmd
</UL>

<P><STRONG><a name="[9b]"></a>NetTask_Timer_Start_Event</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_task.o(i.NetTask_Timer_Start_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NetTask_Timer_Start_Event &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_AddCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_RevByteOneByte
</UL>

<P><STRONG><a name="[a7]"></a>OS_Clock_GetSystemClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal_clock.o(i.OS_Clock_GetSystemClock))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Update
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Blink
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate
</UL>

<P><STRONG><a name="[113]"></a>OS_Clock_Update</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, osal_clock.o(i.OS_Clock_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_Clock_Update &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[96]"></a>OS_Events_Clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osal_core.o(i.OS_Events_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_Events_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Clear_Event
</UL>

<P><STRONG><a name="[97]"></a>OS_Events_Set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osal_core.o(i.OS_Events_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Send_Event
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Blink
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask_Send_Event
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Update
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Send_Event
</UL>

<P><STRONG><a name="[117]"></a>OS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, osal_core.o(i.OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OS_Init &rArr; OS_Task_Init &rArr; UserTask_Init &rArr; BSP_IIC_Init &rArr; bsp_iic1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Task_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Msg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>OS_Msg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, osal_msg.o(i.OS_Msg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[11b]"></a>OS_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_core.o(i.OS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_Start &rArr; osalRun &rArr; osalTimeUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalRun
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>OS_Task_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, osal_task.o(i.OS_Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = OS_Task_Init &rArr; UserTask_Init &rArr; BSP_IIC_Init &rArr; bsp_iic1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTask_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[119]"></a>OS_Timer_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, osal_timer.o(i.OS_Timer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[98]"></a>OS_Timer_Start</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, osal_timer.o(i.OS_Timer_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Timer_Start_Event
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTask_Timer_Start_Event
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Init
</UL>

<P><STRONG><a name="[99]"></a>OS_Timer_Stop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, osal_timer.o(i.OS_Timer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_Timer_Stop &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerFind
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Blink
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_Timer_Stop_Event
</UL>

<P><STRONG><a name="[120]"></a>OS_Timer_Update</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, osal_timer.o(i.OS_Timer_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_Timer_Update &rArr; OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[127]"></a>RTC_ClearStatusFlags</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>RTC_GetDatetime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_rtc.o(i.RTC_GetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RTC_GetDatetime &rArr; RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ShowDate
</UL>

<P><STRONG><a name="[b4]"></a>RTC_GetDefaultConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_rtc.o(i.RTC_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RTC_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = RTC_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatusFlags
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>RTC_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fsl_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RTC_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[b6]"></a>RTC_SetDatetime</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_rtc.o(i.RTC_SetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetDate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[128]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[12a]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[63]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Battery_Reduce
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ShowClock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM0_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ShowDate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Init
</UL>

<P><STRONG><a name="[12e]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 536 bytes, Stack size 136 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[144]"></a>SIM_GetUniqueId</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_sim.o(i.SIM_GetUniqueId))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_makeUIDtoSNcode
</UL>

<P><STRONG><a name="[33]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_spi.o(i.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SPI0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_spi.o(i.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SPI1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; OS_Timer_Update &rArr; OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_Update
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SYSTICK_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_mkl16z4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>SystemParam_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_param.o(i.SystemParam_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = SystemParam_Init &rArr; SystemParam_Reset &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_ReadBytes
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Modbus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_BSP
</UL>

<P><STRONG><a name="[135]"></a>SystemParam_Reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, system_param.o(i.SystemParam_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = SystemParam_Reset &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Save
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_makeUIDtoSNcode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Init
</UL>

<P><STRONG><a name="[65]"></a>SystemParam_Save</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system_param.o(i.SystemParam_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_WriteBytes
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Battery_Reduce
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_Sample_Rate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_SNcode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_AlarmTime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetConf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Reset
</UL>

<P><STRONG><a name="[1c]"></a>TPM0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_tim.o(i.TPM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TPM0_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpsci.o(i.UART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART0_IRQHandler &rArr; BSP_E32_RevByteOneByte &rArr; NetTask_Timer_Start_Event &rArr; OS_Timer_Start &rArr; osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_GetStatusFlags
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_ClearStatusFlags
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_E32_RevByteOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>UART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_uart.o(i.UART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = UART2_IRQHandler &rArr; APP_Conf_RevByteOneByte &rArr; bsp_conf_rev &rArr; APP_RevMessage_Process &rArr; APP_Conf_SetADCToRealValue &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_RevByteOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>UART_ClearStatusFlags</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, fsl_uart.o(i.UART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>UART_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_uart.o(i.UART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlags
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>UART_TransferAbortSendDMA</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_uart_dma.o(i.UART_TransferAbortSendDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UART_TransferAbortSendDMA &rArr; DMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableTxDMA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>UART_TransferSendDMA</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, fsl_uart_dma.o(i.UART_TransferSendDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = UART_TransferSendDMA &rArr; DMA_SubmitTransfer &rArr; DMA_SetTransferConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitTransfer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareTransfer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableTxDMA
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_WriteBytes_DMA
</UL>

<P><STRONG><a name="[11d]"></a>UserTask_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, user_task.o(i.UserTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = UserTask_Init &rArr; BSP_IIC_Init &rArr; bsp_iic1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Power_V30_ON
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Blink
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IIC_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Send_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Task_Init
</UL>

<P><STRONG><a name="[3e]"></a>UserTask_Process</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, user_task.o(i.UserTask_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = UserTask_Process &rArr; BSP_ShowDate &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Start
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadAccelWhoAmI
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ShowDate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_task.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>UserTask_Send_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_task.o(i.UserTask_Send_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UserTask_Send_Event &rArr; OS_Events_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTask_Init
</UL>

<P><STRONG><a name="[6a]"></a>Version_Get_Bin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, version.o(i.Version_Get_Bin))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_GetVersion
</UL>

<P><STRONG><a name="[92]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_mkl16z4.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetProperty
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetInstance
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitTransfer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransferConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ResetChannel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareTransfer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_HandleIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDefaultConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferSendDMA
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferAbortSendDMA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelStatusFlags
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferSendDMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendDMA
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelStatusFlags
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC16_GetChannelConversionValue
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_ConvertSecondsToDatetime
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_ConvertDatetimeToSeconds
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelStatusFlags
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelStatusFlags
</UL>

<P><STRONG><a name="[f7]"></a>flash_cache_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_flash.o(i.flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = main &rArr; Board_Init_BSP &rArr; SystemParam_Init &rArr; SystemParam_Reset &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_ClockRUN
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init_BSP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[141]"></a>mcm_flash_cache_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_flash.o(i.mcm_flash_cache_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcm_flash_cache_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[11e]"></a>osalTimerAdd</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, osal_timer.o(i.osalTimerAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osalTimerAdd &rArr; osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerFind
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAlloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Start
</UL>

<P><STRONG><a name="[143]"></a>osalTimerAlloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, osal_timer.o(i.osalTimerAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osalTimerAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAdd
</UL>

<P><STRONG><a name="[11f]"></a>osalTimerFind</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, osal_timer.o(i.osalTimerFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osalTimerFind
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Stop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAdd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
</UL>

<P><STRONG><a name="[145]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
</UL>

<P><STRONG><a name="[147]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
</UL>

<P><STRONG><a name="[17e]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
</UL>

<P><STRONG><a name="[148]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_Set_ADCCalibration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_SetADCToRealValue
</UL>

<P><STRONG><a name="[14a]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ed]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, fsl_debug_console.o(i.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[ef]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 570 bytes, Stack size 120 bytes, fsl_debug_console.o(i.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[f0]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, fsl_debug_console.o(i.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[d6]"></a>CLOCK_GetFllExtRefClkFreq</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFllExtRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>

<P><STRONG><a name="[d4]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[dc]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[d7]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0RefFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllExtRefClkFreq
</UL>

<P><STRONG><a name="[de]"></a>CLOCK_GetOscRangeFromFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscRangeFromFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
</UL>

<P><STRONG><a name="[dd]"></a>CLOCK_GetPll0RefFreq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPll0RefFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CLOCK_GetPll0RefFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
</UL>

<P><STRONG><a name="[fb]"></a>copy_flash_common_bit_operation</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_flash.o(i.copy_flash_common_bit_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = copy_flash_common_bit_operation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[fa]"></a>copy_flash_run_command</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_flash.o(i.copy_flash_run_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copy_flash_run_command &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrepareExecuteInRamFunctions
</UL>

<P><STRONG><a name="[f5]"></a>flash_cache_clear_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_cache_clear_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcm_flash_cache_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[f8]"></a>flash_check_execute_in_ram_function_info</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_execute_in_ram_function_info))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_cache_clear_process
</UL>

<P><STRONG><a name="[f3]"></a>flash_check_range</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, fsl_flash.o(i.flash_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[f4]"></a>flash_check_user_key</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_flash.o(i.flash_check_user_key))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[f6]"></a>flash_command_sequence</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_command_sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_execute_in_ram_function_info
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[f2]"></a>flash_get_matched_operation_info</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_flash.o(i.flash_get_matched_operation_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_get_matched_operation_info
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[105]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_i2c.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[109]"></a>EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_i2c.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
</UL>

<P><STRONG><a name="[10f]"></a>I2C_CheckAndClearError</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_CheckAndClearError))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferRunStateMachine
</UL>

<P><STRONG><a name="[ff]"></a>I2C_InitTransferStateMachine</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_i2c.o(i.I2C_InitTransferStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_InitTransferStateMachine &rArr; I2C_MasterRepeatedStart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferNonBlocking
</UL>

<P><STRONG><a name="[100]"></a>I2C_MasterClearStatusFlags</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_i2c.o(i.I2C_MasterClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitTransferStateMachine
</UL>

<P><STRONG><a name="[10a]"></a>I2C_MasterTransferRunStateMachine</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, fsl_i2c.o(i.I2C_MasterTransferRunStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_MasterTransferRunStateMachine &rArr; I2C_MasterRepeatedStart
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckAndClearError
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[fd]"></a>I2C_TransferCommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_i2c.o(i.I2C_TransferCommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferCommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_DriverIRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>DMA_ClearChannelStatusFlags</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_lpsci_dma.o(i.DMA_ClearChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferAbortSendDMA
</UL>

<P><STRONG><a name="[ea]"></a>DMA_StartTransfer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_lpsci_dma.o(i.DMA_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DMA_StartTransfer &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferSendDMA
</UL>

<P><STRONG><a name="[111]"></a>LPSCI_EnableTxDMA</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_lpsci_dma.o(i.LPSCI_EnableTxDMA))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferSendDMA
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSCI_TransferAbortSendDMA
</UL>

<P><STRONG><a name="[124]"></a>RTC_CheckDatetimeFormat</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fsl_rtc.o(i.RTC_CheckDatetimeFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RTC_CheckDatetimeFormat &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>

<P><STRONG><a name="[125]"></a>RTC_ConvertDatetimeToSeconds</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, fsl_rtc.o(i.RTC_ConvertDatetimeToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>

<P><STRONG><a name="[126]"></a>RTC_ConvertSecondsToDatetime</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, fsl_rtc.o(i.RTC_ConvertSecondsToDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
</UL>

<P><STRONG><a name="[132]"></a>SPI_CommonIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_spi.o(i.SPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>DMA_ClearChannelStatusFlags</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fsl_uart_dma.o(i.DMA_ClearChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendDMA
</UL>

<P><STRONG><a name="[eb]"></a>DMA_StartTransfer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_uart_dma.o(i.DMA_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DMA_StartTransfer &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferSendDMA
</UL>

<P><STRONG><a name="[13b]"></a>UART_EnableTxDMA</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_uart_dma.o(i.UART_EnableTxDMA))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferSendDMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransferAbortSendDMA
</UL>

<P><STRONG><a name="[76]"></a>bsp_conf_rev</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, app_conf.o(i.bsp_conf_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = bsp_conf_rev &rArr; APP_RevMessage_Process &rArr; APP_Conf_SetADCToRealValue &rArr; SystemParam_Save &rArr; BSP_Flash_WriteBytes &rArr; FLASH_Erase &rArr; flash_cache_clear &rArr; flash_cache_clear_process &rArr; mcm_flash_cache_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNprotocol_Checksum
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Conf_RevByteOneByte
</UL>

<P><STRONG><a name="[93]"></a>app_revACK</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_revmessage.o(i.app_revACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_revACK &rArr; BSP_RTC_SetDate &rArr; RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetDate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_revsetAckFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RevMessage_Process
</UL>

<P><STRONG><a name="[13e]"></a>app_revsetAckFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_revmessage.o(i.app_revsetAckFlag))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_revACK
</UL>

<P><STRONG><a name="[94]"></a>app_transfer_enqueue_cmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_transfer.o(i.app_transfer_enqueue_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_transfer_enqueue_cmd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Transfer_TrigSendValue
</UL>

<P><STRONG><a name="[5d]"></a>ADC16_GetChannelConversionValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_adc.o(i.ADC16_GetChannelConversionValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ADC16_GetChannelConversionValue &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>bsp_adc_addvalue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_adc.o(i.bsp_adc_addvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_adc_addvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_CONFIG_SetFllExtRefDiv</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_clock.o(i.CLOCK_CONFIG_SetFllExtRefDiv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_SetSimSafeDivs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_clock.o(i.CLOCK_SetSimSafeDivs))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SystemClockInit
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_led.o(i.GPIO_WritePinOutput))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Close
</UL>

<P><STRONG><a name="[b3]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_rtc.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[b8]"></a>EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_rtc.o(i.EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[b7]"></a>RTC_EnableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_rtc.o(i.RTC_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[b9]"></a>RTC_StartTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_rtc.o(i.RTC_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetDate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[bb]"></a>RTC_StopTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_rtc.o(i.RTC_StopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetDate
</UL>

<P><STRONG><a name="[c1]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTick_Init
</UL>

<P><STRONG><a name="[e1]"></a>DMA_ClearChannelStatusFlags</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_uart.o(i.DMA_ClearChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>DMA_GetChannelStatusFlags</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_uart.o(i.DMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_WritePinOutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_power.o(i.GPIO_WritePinOutput))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Power_V30_ON
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Power_Init
</UL>

<P><STRONG><a name="[140]"></a>CLOCK_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_iic.o(i.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>

<P><STRONG><a name="[123]"></a>PORT_SetPinConfig</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bsp_iic.o(i.PORT_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PORT_SetPinConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_iic1_init
</UL>

<P><STRONG><a name="[a6]"></a>bsp_iic1_init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bsp_iic.o(i.bsp_iic1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = bsp_iic1_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetFllExtRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertRadixNumToString &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferCreateHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGetDefaultConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetPinConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IIC_Init
</UL>

<P><STRONG><a name="[3c]"></a>i2c_master_callback</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, bsp_iic.o(i.i2c_master_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_master_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_iic.o(i.bsp_iic1_init)
</UL>
<P><STRONG><a name="[136]"></a>sys_makeUIDtoSNcode</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, system_param.o(i.sys_makeUIDtoSNcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sys_makeUIDtoSNcode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_GetUniqueId
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_Modbus
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParam_Reset
</UL>

<P><STRONG><a name="[114]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_clock.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_Update
</UL>

<P><STRONG><a name="[115]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_core.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalRun
</UL>

<P><STRONG><a name="[116]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_core.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Events_Clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalRun
</UL>

<P><STRONG><a name="[11c]"></a>osalRun</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, osal_core.o(i.osalRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osalRun &rArr; osalTimeUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Start
</UL>

<P><STRONG><a name="[142]"></a>osalTimeUpdate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, osal_core.o(i.osalTimeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osalTimeUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Clock_GetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalRun
</UL>

<P><STRONG><a name="[121]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_timer.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerFind
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAlloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAdd
</UL>

<P><STRONG><a name="[122]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_timer.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Timer_Update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerFind
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAlloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerAdd
</UL>

<P><STRONG><a name="[129]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DoInit &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[12b]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[12d]"></a>_WriteBlocking</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[12c]"></a>_WriteNoCheck</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[130]"></a>_PrintInt</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[131]"></a>_PrintUnsigned</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[12f]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[149]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[146]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
